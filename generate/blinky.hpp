//.$file${generate::blinky.hpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: blinky.qm
// File:  ${generate::blinky.hpp}
//
// This code has been generated by QM 5.0.0 <www.state-machine.com/qm/>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// This program is open source software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
// for more details.
//
//.$endhead${generate::blinky.hpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#include <functional>
#include <memory>

#include "qpcpp.hpp"

#include "bulb.hpp"

using namespace std;
using namespace QP;

enum BlinkySignals {
    TIMEOUT_SIG = Q_USER_SIG,
    MAX_SIG
};

//.$declare${AOs::Blinky} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//.${AOs::Blinky} ............................................................
class Blinky : public QP::QActive {
private:
    QP::QTimeEvt m_timeEvt;
    std::function< void(void) > cbOn;
    std::function< void(void) > cbOff;
    std::unique_ptr<Bulb> m_bulb;

public:

    // constructor
    Blinky();

private:

    // called on initilized
    void onInit();
    void onOff();
    void onOn();

    // is m_bulb valid
    bool isValid();

public:

    // set m_bulb
    void setBulb(std::unique_ptr<Bulb> bulb);

    // reset m_bulb
    void resetBulb();

protected:
    Q_STATE_DECL(initial);
    Q_STATE_DECL(off);
    Q_STATE_DECL(on);
};
//.$enddecl${AOs::Blinky} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

extern Blinky * const AO_Blinky;